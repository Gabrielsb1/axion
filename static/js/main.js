// main.js - Configura√ß√£o espec√≠fica para matr√≠cula
import { processFile } from './process.js';

// Configura√ß√£o da UI
const ui = {
    showAlert: function(message, type = 'info') {
        // Implementa√ß√£o simples de alerta
        console.log(`[${type.toUpperCase()}] ${message}`);
        // Aqui voc√™ pode implementar um sistema de alertas mais sofisticado
    },
    updateStatus: function(message, type = 'info') {
        const statusElement = document.getElementById('matriculaStatus');
        if (statusElement) {
            statusElement.innerHTML = `<div class="alert alert-${type}"><i class="fas fa-spinner fa-spin me-2"></i>${message}</div>`;
        }
    },
    showProgress: function(show) {
        // Implementa√ß√£o de progresso se necess√°rio
        console.log(`Progress: ${show}`);
    }
};

// Fun√ß√£o para configurar event listeners espec√≠ficos da matr√≠cula
function setupMatriculaEventListeners() {
    console.log('üöÄ Configurando event listeners da matr√≠cula...');
    
    // File input para matr√≠cula
    const fileInputMatricula = document.getElementById('fileInputMatricula');
    if (fileInputMatricula) {
        // Remover listeners existentes se houver
        const newFileInput = fileInputMatricula.cloneNode(true);
        fileInputMatricula.parentNode.replaceChild(newFileInput, fileInputMatricula);
        
        newFileInput.addEventListener('change', (event) => {
            const files = event.target.files;
            const processButton = document.getElementById('processFileMatricula');
            
            if (files && files.length > 0) {
                processButton.disabled = false;
                console.log(`${files.length} arquivo(s) selecionado(s) para matr√≠cula`);
            } else {
                processButton.disabled = true;
            }
        });
        console.log('‚úÖ File input matr√≠cula configurado');
    }
    
    // Process button para matr√≠cula
    const processButtonMatricula = document.getElementById('processFileMatricula');
    if (processButtonMatricula) {
        // Remover listeners existentes se houver
        const newProcessButton = processButtonMatricula.cloneNode(true);
        processButtonMatricula.parentNode.replaceChild(newProcessButton, processButtonMatricula);
        
        newProcessButton.addEventListener('click', async () => {
            const fileInput = document.getElementById('fileInputMatricula');
            const files = fileInput.files;
            
            if (!files || files.length === 0) {
                ui.showAlert('Nenhum arquivo selecionado!', 'warning');
                return;
            }
            
            // Converter FileList para Array
            const filesArray = Array.from(files);
            
            // Processar arquivos
            await processFile(filesArray, ui, (data) => {
                // Callback para definir dados atuais
                window.currentData = data;
            });
        });
        console.log('‚úÖ Process button matr√≠cula configurado');
    }
    
    // Download buttons para matr√≠cula
    const downloadButtons = [
        { id: 'downloadWord', func: downloadWordFile },
        { id: 'downloadPDF', func: downloadPDFFile },
        { id: 'downloadJSON', func: downloadJSONFile }
    ];
    
    downloadButtons.forEach(button => {
        const element = document.getElementById(button.id);
        if (element) {
            // Remover listeners existentes se houver
            const newElement = element.cloneNode(true);
            element.parentNode.replaceChild(newElement, element);
            
            newElement.addEventListener('click', () => button.func());
            console.log(`‚úÖ Download button ${button.id} configurado para matr√≠cula`);
        }
    });
}

// Fun√ß√µes de download espec√≠ficas para matr√≠cula
function downloadWordFile() {
    if (!window.currentData) {
        ui.showAlert('Nenhum dado dispon√≠vel para download', 'warning');
        return;
    }
    
    const content = formatDataForDownload(window.currentData);
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `dados_matricula_${new Date().toISOString().slice(0, 10)}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    ui.showAlert('Arquivo Word baixado com sucesso!', 'success');
}

function downloadPDFFile() {
    if (!window.currentData) {
        ui.showAlert('Nenhum dado dispon√≠vel para download', 'warning');
        return;
    }

    try {
        const doc = new window.jspdf.jsPDF();
        const content = formatDataForDownload(window.currentData);
        const lines = doc.splitTextToSize(content, 180);
        doc.text(lines, 10, 10);
        doc.save(`dados_matricula_${new Date().toISOString().slice(0, 10)}.pdf`);
        ui.showAlert('PDF baixado com sucesso!', 'success');
    } catch (error) {
        console.error('Erro ao gerar PDF:', error);
        ui.showAlert('Erro ao gerar PDF. Verifique se a biblioteca jsPDF est√° carregada.', 'error');
    }
}

function downloadJSONFile() {
    if (!window.currentData) {
        ui.showAlert('Nenhum dado dispon√≠vel para download', 'warning');
        return;
    }
    
    const jsonData = {
        metadata: {
            extractedAt: new Date().toISOString(),
            service: 'matricula'
        },
        data: window.currentData
    };
    
    const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `dados_matricula_${new Date().toISOString().slice(0, 10)}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    ui.showAlert('JSON baixado com sucesso!', 'success');
}

// Fun√ß√£o para formatar dados para download
function formatDataForDownload(data) {
    let content = 'DADOS DA MATR√çCULA\n';
    content += '='.repeat(50) + '\n\n';
    
    if (data.campos) {
        // CADASTRO
        content += '=== CADASTRO ===\n';
        content += `Inscri√ß√£o Imobili√°ria: ${data.campos.inscricao_imobiliaria || 'N√£o informado'}\n`;
        content += `RIP: ${data.campos.rip || 'N√£o informado'}\n\n`;
        
        // DADOS DO IM√ìVEL
        content += '=== DADOS DO IM√ìVEL ===\n';
        content += `Tipo de Im√≥vel: ${data.campos.tipo_imovel || 'N√£o informado'}\n`;
        content += `Tipo de Logradouro: ${data.campos.tipo_logradouro || 'N√£o informado'}\n`;
        content += `CEP: ${data.campos.cep || 'N√£o informado'}\n`;
        content += `Nome do Logradouro: ${data.campos.nome_logradouro || 'N√£o informado'}\n`;
        content += `N√∫mero do Lote: ${data.campos.numero_lote || 'N√£o informado'}\n`;
        content += `Bloco: ${data.campos.bloco || 'N√£o informado'}\n`;
        content += `Pavimento: ${data.campos.pavimento || 'N√£o informado'}\n`;
        content += `Andar: ${data.campos.andar || 'N√£o informado'}\n`;
        content += `Loteamento: ${data.campos.loteamento || 'N√£o informado'}\n`;
        content += `N√∫mero do Loteamento: ${data.campos.numero_loteamento || 'N√£o informado'}\n`;
        content += `Quadra: ${data.campos.quadra || 'N√£o informado'}\n`;
        content += `Bairro: ${data.campos.bairro || 'N√£o informado'}\n`;
        content += `Cidade: ${data.campos.cidade || 'N√£o informado'}\n`;
        content += `Dominialidade: ${data.campos.dominialidade || 'N√£o informado'}\n`;
        content += `√Årea Total: ${data.campos.area_total || 'N√£o informado'}\n`;
        content += `√Årea Constru√≠da: ${data.campos.area_construida || 'N√£o informado'}\n`;
        content += `√Årea Privativa: ${data.campos.area_privativa || 'N√£o informado'}\n`;
        content += `√Årea de Uso Comum: ${data.campos.area_uso_comum || 'N√£o informado'}\n`;
        content += `√Årea Correspondente: ${data.campos.area_correspondente || 'N√£o informado'}\n`;
        content += `Fra√ß√£o Ideal: ${data.campos.fracao_ideal || 'N√£o informado'}\n\n`;
        
        // DADOS PESSOAIS
        content += '=== DADOS PESSOAIS ===\n';
        content += `CPF/CNPJ: ${data.campos.cpf_cnpj || 'N√£o informado'}\n`;
        content += `Nome Completo: ${data.campos.nome_completo || 'N√£o informado'}\n`;
        content += `Sexo: ${data.campos.sexo || 'N√£o informado'}\n`;
        content += `Nacionalidade: ${data.campos.nacionalidade || 'N√£o informado'}\n`;
        content += `Estado Civil: ${data.campos.estado_civil || 'N√£o informado'}\n`;
        content += `Profiss√£o: ${data.campos.profissao || 'N√£o informado'}\n`;
        content += `RG: ${data.campos.rg || 'N√£o informado'}\n`;
        content += `CNH: ${data.campos.cnh || 'N√£o informado'}\n`;
        content += `Endere√ßo Completo: ${data.campos.endereco_completo || 'N√£o informado'}\n`;
        content += `Regime de Casamento: ${data.campos.regime_casamento || 'N√£o informado'}\n`;
        content += `Data do Casamento: ${data.campos.data_casamento || 'N√£o informado'}\n`;
        content += `Matr√≠cula do Casamento: ${data.campos.matricula_casamento || 'N√£o informado'}\n`;
        content += `Natureza Jur√≠dica: ${data.campos.natureza_juridica || 'N√£o informado'}\n`;
        content += `Representante Legal: ${data.campos.representante_legal || 'N√£o informado'}\n\n`;
        
        // INFORMA√á√ïES PARA ATOS
        content += '=== INFORMA√á√ïES PARA ATOS ===\n';
        content += `Valor da Transa√ß√£o: ${data.campos.valor_transacao || 'N√£o informado'}\n`;
        content += `Valor de Avalia√ß√£o: ${data.campos.valor_avaliacao || 'N√£o informado'}\n`;
        content += `Data da Aliena√ß√£o: ${data.campos.data_alienacao || 'N√£o informado'}\n`;
        content += `Forma de Aliena√ß√£o: ${data.campos.forma_alienacao || 'N√£o informado'}\n`;
        content += `Valor da D√≠vida: ${data.campos.valor_divida || 'N√£o informado'}\n`;
        content += `Valor da Aliena√ß√£o do Contrato: ${data.campos.valor_alienacao_contrato || 'N√£o informado'}\n`;
        content += `Tipo de √înus: ${data.campos.tipo_onus || 'N√£o informado'}\n`;
    }
    
    return content;
}

// Inicializa√ß√£o quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Axion - Configurando matr√≠cula...');
    // Aguardar um pouco para o app-simple.js carregar primeiro
    setTimeout(() => {
        setupMatriculaEventListeners();
    }, 100);
}); 