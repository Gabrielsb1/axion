# pyright: reportAttributeAccessIssue=false
# Fun√ß√µes para integra√ß√£o com OpenAI/ChatGPT

# (O conte√∫do ser√° movido do app_ocr_melhor.py) 

import openai
import re
import json
from config import Config

def clean_and_validate_fields(fields_dict, service_type='matricula'):
    """Limpa e valida os campos extra√≠dos pela OpenAI"""
    if service_type == 'matricula':
        expected_fields = [
            'numero_matricula', 'data_matricula', 'descricao_imovel', 'endereco',
            'area_privativa', 'area_total', 'garagem_vagas', 'proprietarios',
            'livro_anterior', 'folha_anterior', 'matricula_anterior', 'tipo_titulo',
            'valor_titulo', 'comprador', 'cpf_cnpj', 'valor_itbi', 'numero_dam',
            'data_pagamento_itbi'
        ]
    elif service_type == 'minuta':
        expected_fields = [
            'descricao_imovel_completa', 'proprietario_atual', 'tipo_onus_ativo', 'descricao_onus_completa',
            'numero_matricula', 'possiveis_erros'
        ]
    elif service_type == 'contratos':
        expected_fields = [
            # 1. Qualifica√ß√£o das Partes - Parte 1
            'nome_parte1', 'nacionalidade_parte1', 'estado_civil_parte1', 'profissao_parte1', 'cpf_parte1', 'rg_parte1', 'endereco_parte1', 'conjuge_parte1',
            # 1. Qualifica√ß√£o das Partes - Parte 2
            'nome_parte2', 'nacionalidade_parte2', 'estado_civil_parte2', 'profissao_parte2', 'cpf_parte2', 'rg_parte2', 'endereco_parte2', 'conjuge_parte2',
            # 1. Qualifica√ß√£o das Partes - Pessoas Jur√≠dicas
            'razao_social', 'cnpj', 'endereco_pj', 'representante_legal', 'instrumento_representacao',
            # 2. Identifica√ß√£o do Im√≥vel
            'endereco_imovel', 'numero_matricula_imovel', 'cartorio_registro', 'tipo_imovel', 'descricao_completa_imovel', 'origem_propriedade',
            # 3. Natureza do Neg√≥cio Jur√≠dico
            'tipo_contrato', 'finalidade_transacao', 'valor_negocio', 'forma_pagamento', 'condicoes_clausulas',
            # 4. Informa√ß√µes Tribut√°rias e Encargos
            'valor_itbi', 'itbi_pago', 'base_calculo', 'declaracao_isencao', 'itr_ccir', 'debitos_fiscais', 'certidoes_negativas',
            # 5. √înus e Gravames
            'hipoteca', 'alienacao_fiduciaria', 'usufruto', 'penhora', 'clausulas_inalienabilidade', 'acoes_judiciais',
            # 6. Documentos Complementares
            'procuracoes', 'escrituras_anteriores', 'contratos_preliminares', 'certidoes',
            # 7. Informa√ß√µes para a Minuta
            'titulo_minuta', 'identificacao_outorgantes', 'clausulas_contratuais', 'declaracoes_legais', 'responsabilidade_tributos', 'reconhecimento_firma'
        ]
    elif service_type == 'escrituras':
        expected_fields = [
            # 1. Identifica√ß√£o do Ato
            'tipo_escritura', 'numero_livro', 'numero_folha', 'data_lavratura', 'nome_tabeliao', 'termo_eletronico',
            # 2. Qualifica√ß√£o das Partes - Parte 1
            'nome_parte1_escritura', 'nacionalidade_parte1_escritura', 'estado_civil_parte1_escritura', 'profissao_parte1_escritura', 'cpf_parte1_escritura', 'rg_parte1_escritura', 'endereco_parte1_escritura', 'regime_bens_parte1',
            # 2. Qualifica√ß√£o das Partes - Parte 2
            'nome_parte2_escritura', 'nacionalidade_parte2_escritura', 'estado_civil_parte2_escritura', 'profissao_parte2_escritura', 'cpf_parte2_escritura', 'rg_parte2_escritura', 'endereco_parte2_escritura', 'regime_bens_parte2',
            # 2. Qualifica√ß√£o das Partes - Pessoas Jur√≠dicas
            'razao_social_escritura', 'cnpj_escritura', 'endereco_pj_escritura', 'representante_legal_escritura', 'instrumento_representacao_escritura',
            # 3. Identifica√ß√£o do Im√≥vel
            'endereco_imovel_escritura', 'matricula_escritura', 'cartorio_registro_escritura', 'area_total_escritura', 'confrontacoes_escritura', 'benfeitorias_escritura', 'inscricao_cadastral', 'origem_propriedade_escritura',
            # 4. Informa√ß√µes do Neg√≥cio Jur√≠dico
            'valor_imovel_escritura', 'forma_pagamento_escritura', 'condicoes_suspensivas', 'participacao_terceiros', 'clausulas_especiais',
            # 5. Tributos e Documentos
            'valor_itbi_escritura', 'declaracao_isencao_escritura', 'numero_guia', 'data_guia', 'certidoes_negativas', 'certidao_estado_civil', 'certidao_matricula', 'comprovantes_residencia',
            # 6. Procura√ß√µes
            'outorgante_procura', 'outorgado_procura', 'livro_procura', 'folha_procura', 'data_lavratura_procura', 'poderes_concedidos', 'validade_procura', 'procura_especifica',
            # 7. √înus e Gravames
            'existe_onus', 'tipo_onus_escritura', 'clausulas_impeditivas',
            # 8. Cl√°usulas e Declara√ß√µes Importantes
            'declaracao_tributos', 'responsabilidade_registro', 'declaracao_quitacao', 'imovel_livre_desembaracado', 'fe_publica_tabeliao', 'assinaturas'
        ]
    else:
        expected_fields = []
    
    cleaned_fields = {}
    
    for field in expected_fields:
        value = fields_dict.get(field, '')
        
        # Converter para string e limpar
        if value is None:
            value = ''
        elif isinstance(value, (dict, list)):
            # Se for objeto ou lista, converter para string
            value = str(value)
        else:
            value = str(value).strip()
        
        cleaned_fields[field] = value
    
    print(f"üßπ Campos limpos: {len(cleaned_fields)} campos processados")
    
    # Mostrar dados extra√≠dos no terminal
    print("\n" + "="*60)
    print(f"üìã DADOS EXTRA√çDOS PELA IA ({service_type.upper()}):")
    print("="*60)
    for field, value in cleaned_fields.items():
        if value and value.strip():
            print(f"‚úÖ {field}: {value}")
        else:
            print(f"‚ùå {field}: (vazio)")
    print("="*60)
    
    return cleaned_fields

def extract_fields_with_openai(text, model="gpt-3.5-turbo", service_type="matricula"):
    """Envia o texto para a OpenAI API e retorna os campos extra√≠dos em JSON"""
    try:
        print(f"üîç Iniciando extra√ß√£o com OpenAI - Modelo: {model} - Servi√ßo: {service_type}")
        print(f"üìù Tamanho do texto: {len(text)} caracteres")
        
        if service_type == "matricula":
            prompt = (
                "Extraia os seguintes campos do texto da matr√≠cula de im√≥vel abaixo. "
                "Responda APENAS em JSON v√°lido, sem explica√ß√µes ou texto adicional. "
                "Todos os valores devem ser strings. Se um campo n√£o for encontrado, use string vazia (\"\").\n"
                "Campos a extrair: numero_matricula, data_matricula, descricao_imovel, endereco, area_privativa, area_total, garagem_vagas, proprietarios, livro_anterior, folha_anterior, matricula_anterior, tipo_titulo, valor_titulo, comprador, cpf_cnpj, valor_itbi, numero_dam, data_pagamento_itbi.\n"
                "Exemplo de formato esperado: {\"numero_matricula\": \"123\", \"data_matricula\": \"01/01/2023\", ...}\n"
                "Texto da matr√≠cula:\n" + text
            )
        elif service_type == "minuta":
            prompt = (
                "Extraia os seguintes campos do texto da minuta abaixo. "
                "Responda APENAS em JSON v√°lido, sem explica√ß√µes ou texto adicional. "
                "Todos os valores devem ser strings. Se um campo n√£o for encontrado, use string vazia (\"\").\n"
                "Campos a extrair:\n"
                "- descricao_imovel_completa: Texto completo referente √† descri√ß√£o do im√≥vel (procure por 'IMOVEL:' ou similar)\n"
                "- proprietario_atual: Nome completo do propriet√°rio atual do im√≥vel\n"
                "- tipo_onus_ativo: Tipo de √¥nus que est√° ativo na matr√≠cula (ex: Hipoteca, Penhora, Usufruto, etc.)\n"
                "- descricao_onus_completa: Descri√ß√£o completa do √¥nus ativo (texto completo extra√≠do referente ao √¥nus)\n"
                "- numero_matricula: N√∫mero da matr√≠cula\n"
                "- possiveis_erros: Lista de poss√≠veis erros ou inconsist√™ncias encontradas durante a extra√ß√£o (se houver)\n"
                "Exemplo de formato esperado: {\"descricao_imovel_completa\": \"texto completo...\", \"proprietario_atual\": \"nome...\", ...}\n"
                "Texto da minuta:\n" + text
            )
        elif service_type == "contratos":
            prompt = (
                "Extraia os seguintes campos do texto do contrato abaixo. "
                "Responda APENAS em JSON v√°lido, sem explica√ß√µes ou texto adicional. "
                "Todos os valores devem ser strings. Se um campo n√£o for encontrado, use string vazia (\"\").\n"
                "Campos a extrair:\n"
                "1. QUALIFICA√á√ÉO DAS PARTES:\n"
                "- nome_parte1: Nome completo da Parte 1 (vendedor/outorgante)\n"
                "- nacionalidade_parte1: Nacionalidade da Parte 1\n"
                "- estado_civil_parte1: Estado civil da Parte 1 (e regime de bens, se casado)\n"
                "- profissao_parte1: Profiss√£o da Parte 1\n"
                "- cpf_parte1: CPF da Parte 1\n"
                "- rg_parte1: RG da Parte 1 (com √≥rg√£o emissor e data)\n"
                "- endereco_parte1: Endere√ßo completo da Parte 1\n"
                "- conjuge_parte1: C√¥njuge da Parte 1 (nome completo, CPF, regime de bens, necessidade de anu√™ncia)\n"
                "- nome_parte2: Nome completo da Parte 2 (comprador/outorgado)\n"
                "- nacionalidade_parte2: Nacionalidade da Parte 2\n"
                "- estado_civil_parte2: Estado civil da Parte 2 (e regime de bens, se casado)\n"
                "- profissao_parte2: Profiss√£o da Parte 2\n"
                "- cpf_parte2: CPF da Parte 2\n"
                "- rg_parte2: RG da Parte 2 (com √≥rg√£o emissor e data)\n"
                "- endereco_parte2: Endere√ßo completo da Parte 2\n"
                "- conjuge_parte2: C√¥njuge da Parte 2 (nome completo, CPF, regime de bens, necessidade de anu√™ncia)\n"
                "- razao_social: Raz√£o social (se pessoa jur√≠dica)\n"
                "- cnpj: CNPJ (se pessoa jur√≠dica)\n"
                "- endereco_pj: Endere√ßo da pessoa jur√≠dica\n"
                "- representante_legal: Representante legal (nome, CPF, RG, cargo)\n"
                "- instrumento_representacao: Instrumento de representa√ß√£o (contrato social, ata, procura√ß√£o)\n"
                "2. IDENTIFICA√á√ÉO DO IM√ìVEL:\n"
                "- endereco_imovel: Endere√ßo completo do im√≥vel\n"
                "- numero_matricula_imovel: N√∫mero da matr√≠cula do im√≥vel\n"
                "- cartorio_registro: Cart√≥rio de Registro de Im√≥veis competente (1¬∫, 2¬∫, etc.)\n"
                "- tipo_imovel: Tipo do im√≥vel (urbano ou rural)\n"
                "- descricao_completa_imovel: Descri√ß√£o completa do im√≥vel (√°rea, confronta√ß√µes, benfeitorias, inscri√ß√£o municipal, √°rea constru√≠da)\n"
                "- origem_propriedade: Origem da propriedade (transcri√ß√£o anterior, matr√≠cula, escritura anterior)\n"
                "3. NATUREZA DO NEG√ìCIO JUR√çDICO:\n"
                "- tipo_contrato: Tipo de contrato (compra e venda, doa√ß√£o, permuta, cess√£o, financiamento, da√ß√£o, adjudica√ß√£o, etc.)\n"
                "- finalidade_transacao: Finalidade da transa√ß√£o (ex: regulariza√ß√£o, transmiss√£o, garantia)\n"
                "- valor_negocio: Valor do neg√≥cio\n"
                "- forma_pagamento: Forma de pagamento (√† vista, financiado, parcelado, FGTS, etc.)\n"
                "- condicoes_clausulas: Exist√™ncia de condi√ß√µes, cl√°usulas resolutivas, prazos, obriga√ß√µes acess√≥rias\n"
                "4. INFORMA√á√ïES TRIBUT√ÅRIAS E ENCARGOS:\n"
                "- valor_itbi: Valor do ITBI\n"
                "- itbi_pago: Se o ITBI foi pago (Sim/N√£o)\n"
                "- base_calculo: Base de c√°lculo\n"
                "- declaracao_isencao: Declara√ß√£o de isen√ß√£o, se aplic√°vel\n"
                "- itr_ccir: ITR ou CCIR (em im√≥veis rurais)\n"
                "- debitos_fiscais: Exist√™ncia de d√©bitos fiscais ou √¥nus\n"
                "- certidoes_negativas: Certid√µes negativas ou positivas com efeitos de negativa\n"
                "5. √îNUS E GRAVAMES:\n"
                "- hipoteca: Hipoteca\n"
                "- alienacao_fiduciaria: Aliena√ß√£o fiduci√°ria\n"
                "- usufruto: Usufruto\n"
                "- penhora: Penhora\n"
                "- clausulas_inalienabilidade: Cl√°usulas de inalienabilidade ou impenhorabilidade\n"
                "- acoes_judiciais: A√ß√µes judiciais (averba√ß√µes)\n"
                "6. DOCUMENTOS COMPLEMENTARES:\n"
                "- procuracoes: Procura√ß√µes (com poderes espec√≠ficos, validade, dados do outorgante/outorgado)\n"
                "- escrituras_anteriores: Escrituras anteriores\n"
                "- contratos_preliminares: Contratos preliminares\n"
                "- certidoes: Certid√µes (estado civil, negativa de d√©bitos, etc.)\n"
                "7. INFORMA√á√ïES PARA A MINUTA:\n"
                "- titulo_minuta: T√≠tulo da minuta (ex: 'Escritura P√∫blica de Compra e Venda')\n"
                "- identificacao_outorgantes: Identifica√ß√£o completa dos outorgantes e outorgados\n"
                "- clausulas_contratuais: Cl√°usulas contratuais relevantes\n"
                "- declaracoes_legais: Declara√ß√µes legais obrigat√≥rias (ex: que o im√≥vel est√° livre de √¥nus, que os impostos foram pagos)\n"
                "- responsabilidade_tributos: Responsabilidade pelo pagamento de tributos e taxas\n"
                "- reconhecimento_firma: Reconhecimento de firma e data\n"
                "Exemplo de formato esperado: {\"nome_parte1\": \"Jo√£o Silva\", \"nacionalidade_parte1\": \"Brasileiro\", ...}\n"
                "Texto do contrato:\n" + text
            )
        elif service_type == "escrituras":
            prompt = (
                "Extraia os seguintes campos do texto da escritura p√∫blica abaixo. "
                "Responda APENAS em JSON v√°lido, sem explica√ß√µes ou texto adicional. "
                "Todos os valores devem ser strings. Se um campo n√£o for encontrado, use string vazia (\"\").\n"
                "Campos a extrair:\n"
                "1. IDENTIFICA√á√ÉO DO ATO:\n"
                "- tipo_escritura: Tipo de escritura (compra e venda, doa√ß√£o, permuta, cess√£o de direitos heredit√°rios, institui√ß√£o de usufruto, invent√°rio e partilha, escritura declarat√≥ria, da√ß√£o em pagamento, constitui√ß√£o de garantia real, etc.)\n"
                "- numero_livro: N√∫mero do livro\n"
                "- numero_folha: N√∫mero da folha (ou termo eletr√¥nico)\n"
                "- data_lavratura: Data da lavratura\n"
                "- nome_tabeliao: Nome do tabeli√£o respons√°vel\n"
                "- termo_eletronico: Termo eletr√¥nico (se aplic√°vel)\n"
                "2. QUALIFICA√á√ÉO DAS PARTES:\n"
                "- nome_parte1_escritura: Nome completo da Parte 1 (outorgante)\n"
                "- nacionalidade_parte1_escritura: Nacionalidade da Parte 1\n"
                "- estado_civil_parte1_escritura: Estado civil da Parte 1 (com regime de bens e nome do c√¥njuge)\n"
                "- profissao_parte1_escritura: Profiss√£o da Parte 1\n"
                "- cpf_parte1_escritura: CPF da Parte 1\n"
                "- rg_parte1_escritura: RG da Parte 1 (com √≥rg√£o emissor e UF)\n"
                "- endereco_parte1_escritura: Endere√ßo da Parte 1\n"
                "- regime_bens_parte1: Regime de bens (se casado: comunh√£o, separa√ß√£o, etc.)\n"
                "- nome_parte2_escritura: Nome completo da Parte 2 (outorgado)\n"
                "- nacionalidade_parte2_escritura: Nacionalidade da Parte 2\n"
                "- estado_civil_parte2_escritura: Estado civil da Parte 2 (com regime de bens e nome do c√¥njuge)\n"
                "- profissao_parte2_escritura: Profiss√£o da Parte 2\n"
                "- cpf_parte2_escritura: CPF da Parte 2\n"
                "- rg_parte2_escritura: RG da Parte 2 (com √≥rg√£o emissor e UF)\n"
                "- endereco_parte2_escritura: Endere√ßo da Parte 2\n"
                "- regime_bens_parte2: Regime de bens (se casado: comunh√£o, separa√ß√£o, etc.)\n"
                "- razao_social_escritura: Raz√£o social (se pessoa jur√≠dica)\n"
                "- cnpj_escritura: CNPJ (se pessoa jur√≠dica)\n"
                "- endereco_pj_escritura: Endere√ßo da pessoa jur√≠dica\n"
                "- representante_legal_escritura: Representante legal (qualifica√ß√£o completa)\n"
                "- instrumento_representacao_escritura: Instrumento de representa√ß√£o (contrato social, estatuto, procura√ß√£o)\n"
                "3. IDENTIFICA√á√ÉO DO IM√ìVEL:\n"
                "- endereco_imovel_escritura: Endere√ßo completo do im√≥vel\n"
                "- matricula_escritura: Matr√≠cula do im√≥vel\n"
                "- cartorio_registro_escritura: Cart√≥rio de Registro de Im√≥veis\n"
                "- area_total_escritura: √Årea total do im√≥vel\n"
                "- confrontacoes_escritura: Confronta√ß√µes do im√≥vel\n"
                "- benfeitorias_escritura: Benfeitorias do im√≥vel\n"
                "- inscricao_cadastral: Inscri√ß√£o no cadastro municipal (IPTU) ou rural (CCIR, ITR)\n"
                "- origem_propriedade_escritura: Origem da propriedade (averba√ß√£o anterior ou escritura anterior)\n"
                "4. INFORMA√á√ïES DO NEG√ìCIO JUR√çDICO:\n"
                "- valor_imovel_escritura: Valor do im√≥vel\n"
                "- forma_pagamento_escritura: Forma de pagamento (√† vista, parcelado, FGTS, financiamento, permuta)\n"
                "- condicoes_suspensivas: Exist√™ncia de condi√ß√µes suspensivas ou resolutivas\n"
                "- participacao_terceiros: Participa√ß√£o de terceiros (financiadoras, cession√°rios)\n"
                "- clausulas_especiais: Cl√°usulas especiais (inalienabilidade, impenhorabilidade, usufruto, revers√£o, direito de prefer√™ncia)\n"
                "5. TRIBUTOS E DOCUMENTOS:\n"
                "- valor_itbi_escritura: Valor do ITBI\n"
                "- declaracao_isencao_escritura: Declara√ß√£o de isen√ß√£o (se aplic√°vel)\n"
                "- numero_guia: N√∫mero da guia paga\n"
                "- data_guia: Data da guia paga\n"
                "- certidoes_negativas: Certid√µes negativas de d√©bitos\n"
                "- certidao_estado_civil: Certid√£o de casamento/div√≥rcio/√≥bito\n"
                "- certidao_matricula: Certid√£o da matr√≠cula atualizada\n"
                "- comprovantes_residencia: Comprovantes de resid√™ncia\n"
                "6. PROCURA√á√ïES:\n"
                "- outorgante_procura: Dados do outorgante da procura√ß√£o\n"
                "- outorgado_procura: Dados do outorgado da procura√ß√£o\n"
                "- livro_procura: Livro da procura√ß√£o\n"
                "- folha_procura: Folha da procura√ß√£o\n"
                "- data_lavratura_procura: Data de lavratura da procura√ß√£o\n"
                "- poderes_concedidos: Poderes concedidos na procura√ß√£o\n"
                "- validade_procura: Validade da procura√ß√£o\n"
                "- procura_especifica: Se a procura√ß√£o √© espec√≠fica para o ato (Sim/N√£o)\n"
                "7. √îNUS E GRAVAMES:\n"
                "- existe_onus: Se h√° ou n√£o √¥nus sobre o im√≥vel (Sim/N√£o)\n"
                "- tipo_onus_escritura: Tipo de √¥nus (hipoteca, penhora, aliena√ß√£o fiduci√°ria, usufruto, etc.)\n"
                "- clausulas_impeditivas: Cl√°usulas impeditivas de aliena√ß√£o\n"
                "8. CL√ÅUSULAS E DECLARA√á√ïES IMPORTANTES:\n"
                "- declaracao_tributos: Declara√ß√£o de ci√™ncia dos tributos e encargos\n"
                "- responsabilidade_registro: Assun√ß√£o de responsabilidade pelo registro\n"
                "- declaracao_quitacao: Declara√ß√£o de quita√ß√£o\n"
                "- imovel_livre_desembaracado: Declara√ß√£o de que o im√≥vel est√° livre e desembara√ßado\n"
                "- fe_publica_tabeliao: F√© p√∫blica do tabeli√£o\n"
                "- assinaturas: Assinaturas (ou men√ß√£o √† f√© p√∫blica do tabeli√£o)\n"
                "Exemplo de formato esperado: {\"tipo_escritura\": \"Compra e Venda\", \"numero_livro\": \"123\", ...}\n"
                "Texto da escritura:\n" + text
            )
        else:
            return {"error": f"Tipo de servi√ßo n√£o suportado: {service_type}"}
        
        if not Config.OPENAI_API_KEY:
            raise ValueError("A vari√°vel de ambiente OPENAI_API_KEY n√£o est√° definida! Por favor, configure antes de usar a API da OpenAI.")
        api_key_preview = Config.OPENAI_API_KEY[:20]
        print(f"üîë Usando chave API: {api_key_preview}...")

        print("üì° Enviando requisi√ß√£o para OpenAI...")
        client = openai.OpenAI(api_key=Config.OPENAI_API_KEY)
        response = client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.0,
            max_tokens=1024
        )
        content = response.choices[0].message.content
        print(f"‚úÖ Resposta recebida da OpenAI - Tamanho: {len(content) if content else 0}")
        
        if content is None:
            print("‚ùå Resposta vazia da OpenAI")
            return {"error": "Resposta vazia da OpenAI", "raw": None}
        
        try:
            # Limpeza do conte√∫do para remover blocos markdown
            def clean_json_response(response_text):
                response_text = re.sub(r'^```json\s*|```$', '', response_text.strip(), flags=re.MULTILINE)
                response_text = re.sub(r'^```\s*|```$', '', response_text.strip(), flags=re.MULTILINE)
                return response_text.strip()

            cleaned_content = clean_json_response(content)
            match = re.search(r'\{[\s\S]+\}', cleaned_content)
            if match:
                result = json.loads(match.group(0))
                print("‚úÖ JSON extra√≠do com sucesso")
                print(f"üìä Campos extra√≠dos: {list(result.keys())}")
                return clean_and_validate_fields(result, service_type)
            result = json.loads(cleaned_content)
            print("‚úÖ JSON direto processado com sucesso")
            print(f"üìä Campos extra√≠dos: {list(result.keys())}")
            return clean_and_validate_fields(result, service_type)
        except Exception as e:
            print(f"‚ùå Erro ao processar JSON: {str(e)}")
            print(f"üìÑ Conte√∫do recebido: {content[:200]}...")
            return {"error": f"Erro ao interpretar resposta da OpenAI: {str(e)}", "raw": content}
            
    except Exception as e:
        print(f"‚ùå Erro geral na extra√ß√£o OpenAI: {str(e)}")
        return {"error": f"Erro na comunica√ß√£o com OpenAI: {str(e)}", "raw": None} 